package com.konkr.Activities;

import android.content.DialogInterface;
import android.content.Intent;
import android.databinding.DataBindingUtil;
import android.support.constraint.ConstraintLayout;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import com.facebook.drawee.view.SimpleDraweeView;
import com.google.gson.Gson;
import com.konkr.Models.ExpressionOnFeed;
import com.konkr.Models.HomeFeed;
import com.konkr.Models.MiSuppliment;
import com.konkr.Models.UserDetails;
import com.konkr.R;
import com.konkr.SharedPreferences.SessionManager;
import com.konkr.Utils.AlertDialogUtility;
import com.konkr.Utils.ConnectivityDetector;
import com.konkr.Utils.GlobalData;
import com.konkr.Utils.Headerbar;
import com.konkr.Utils.LogM;
import com.konkr.Utils.MyTextView;
import com.konkr.Webservices.GetJsonWithAndroidNetworkingLib;
import com.konkr.Webservices.OnUpdateListener;
import com.konkr.Webservices.WebField;
import com.konkr.databinding.ActivityMiSupplementDetailBinding;

import org.json.JSONObject;

public class MiSupplementDetailActivity extends AppCompatActivity implements View.OnClickListener {

    private ActivityMiSupplementDetailBinding binding;
    private MiSuppliment.SupplementsBean supplimentSearchDataBean;
    private UserDetails.UserDetailsBean.SupplementsBean profileSupplement;
    private HomeFeed.HomeFeedsBean.SupplementsBean homeSupplement;
    private MyTextView tvSupplimentName;
    private MyTextView tvSupplimentDes;
    private SimpleDraweeView ivSupplimentPhoto;
    private Headerbar headerBar;
    private MiSupplementDetailActivity contex;
    private int supplimentId;
    private int otherUserId;

    int goal, inspiring, admiring;


    private SimpleDraweeView ivLike, ivComment, ivGoal, ivAdmiring, ivInspiring;
    private MyTextView tvLikeCount;
    private MyTextView tvCommentCount;
    private boolean isAlreadyLiked;

    private ConstraintLayout rowCom;

    private boolean isExpressVisible;
    String homeFeedId;
    int commentCount;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_mi_supplement_detail);

        binding = DataBindingUtil.setContentView(this, R.layout.activity_mi_supplement_detail);
        contex = MiSupplementDetailActivity.this;

        bindViews();
        setHeaderBar();

        if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.SUPP_LIST)) {
            headerBar.ibtnRightTwo.setVisibility(View.VISIBLE);
            supplimentSearchDataBean = getIntent().getExtras().getParcelable(GlobalData.SUPP_INFO);
            supplimentId = supplimentSearchDataBean.getSuppId();

            homeFeedId = supplimentSearchDataBean.getHomeFeedId();
            commentCount = supplimentSearchDataBean.getCommentCount();
            tvCommentCount.setText("" + supplimentSearchDataBean.getCommentCount());
            tvLikeCount.setText("" + supplimentSearchDataBean.getExpressionCount());

            goal = supplimentSearchDataBean.getIs_goals();
            inspiring = supplimentSearchDataBean.getIs_inspiring();
            admiring = supplimentSearchDataBean.getIs_admiring();
//            LogM.LogE("goal==>" + imageArrayBean.getIs_goals() + "inspiring==>" + imageArrayBean.getIs_inspiring() + "Admining==>" + imageArrayBean.getIs_admiring());
            setLikeButton(goal, admiring, inspiring);
        } else if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.PROFILE_ACTIVITY)) {
            profileSupplement = getIntent().getExtras().getParcelable(GlobalData.SUPP_INFO);
            supplimentId = profileSupplement.getSuppId();
            otherUserId = getIntent().getIntExtra(GlobalData.OTHER_USER_ID, 0);
            if (otherUserId == 0) {
                headerBar.ibtnRightTwo.setVisibility(View.VISIBLE);
            } else {
                headerBar.ibtnRightTwo.setVisibility(View.GONE);
            }
            homeFeedId = profileSupplement.getHomeFeedId();
            commentCount = profileSupplement.getCommentCount();
            tvCommentCount.setText("" + profileSupplement.getCommentCount());
            tvLikeCount.setText("" + profileSupplement.getExpressionCount());

            goal = profileSupplement.getIs_goals();
            inspiring = profileSupplement.getIs_inspiring();
            admiring = profileSupplement.getIs_admiring();
//            LogM.LogE("goal==>" + imageArrayBean.getIs_goals() + "inspiring==>" + imageArrayBean.getIs_inspiring() + "Admining==>" + imageArrayBean.getIs_admiring());
            setLikeButton(goal, admiring, inspiring);
        } else if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.HOME_FEED)) {
            homeSupplement = getIntent().getExtras().getParcelable(GlobalData.SUPP_INFO);
            supplimentId = homeSupplement.getSuppId();
            otherUserId = getIntent().getIntExtra(GlobalData.OTHER_USER_ID, 0);
            LogM.LogE("HomeFeed OhterUserId" + otherUserId);
            if (SessionManager.getUserId(contex) == otherUserId) {
                headerBar.ibtnRightTwo.setVisibility(View.VISIBLE);
            } else {
                headerBar.ibtnRightTwo.setVisibility(View.GONE);
            }

            homeFeedId = getIntent().getStringExtra(GlobalData.HOME_FEED_ID);
            commentCount = getIntent().getIntExtra(GlobalData.COMMENT_COUNT, 0);
            tvCommentCount.setText("" + getIntent().getIntExtra(GlobalData.COMMENT_COUNT, 0));
            tvLikeCount.setText("" + getIntent().getIntExtra(GlobalData.LIKE_COUNT, 0));

            goal = getIntent().getIntExtra(GlobalData.GOAL, 0);
            inspiring = getIntent().getIntExtra(GlobalData.INSPIRING, 0);
            admiring = getIntent().getIntExtra(GlobalData.ADMIRING, 0);
//            LogM.LogE("goal==>" + imageArrayBean.getIs_goals() + "inspiring==>" + imageArrayBean.getIs_inspiring() + "Admining==>" + imageArrayBean.getIs_admiring());
            setLikeButton(goal, admiring, inspiring);

        } else if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.SUPPLEMENT)) {
            homeSupplement = getIntent().getExtras().getParcelable(GlobalData.SUPP_INFO);
            supplimentId = homeSupplement.getSuppId();
            otherUserId = getIntent().getIntExtra(GlobalData.OTHER_USER_ID, 0);
            LogM.LogE("HomeFeed OhterUserId" + otherUserId);
            if (SessionManager.getUserId(contex) == otherUserId) {
                headerBar.ibtnRightTwo.setVisibility(View.VISIBLE);
            } else {
                headerBar.ibtnRightTwo.setVisibility(View.GONE);
            }

            homeFeedId = getIntent().getStringExtra(GlobalData.HOME_FEED_ID);
            commentCount = getIntent().getIntExtra(GlobalData.COMMENT_COUNT, 0);
            tvCommentCount.setText("" + getIntent().getIntExtra(GlobalData.COMMENT_COUNT, 0));
            tvLikeCount.setText("" + getIntent().getIntExtra(GlobalData.LIKE_COUNT, 0));

            goal = getIntent().getIntExtra(GlobalData.GOAL, 0);
            inspiring = getIntent().getIntExtra(GlobalData.INSPIRING, 0);
            admiring = getIntent().getIntExtra(GlobalData.ADMIRING, 0);
//            LogM.LogE("goal==>" + imageArrayBean.getIs_goals() + "inspiring==>" + imageArrayBean.getIs_inspiring() + "Admining==>" + imageArrayBean.getIs_admiring());
            setLikeButton(goal, admiring, inspiring);
        }

        setListener();
        setData();

        ivGoal.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                int intPos = (int) view.getTag();
//                callGiveExpressionOnFeed(GlobalData.EXPRESSION_GOAL, intPos, holder);
                callGiveExpressionOnFeed(GlobalData.EXPRESSION_GOAL, 1);
            }
        });

        ivAdmiring.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                int intPos = (int) view.getTag();
//                callGiveExpressionOnFeed(GlobalData.EXPRESSION_ADMIRING, intPos, holder);

                callGiveExpressionOnFeed(GlobalData.EXPRESSION_ADMIRING, 3);
            }
        });

        ivInspiring.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                int intPos = (int) view.getTag();
//                callGiveExpressionOnFeed(GlobalData.EXPRESSION_INSPIRING, intPos, holder);
                callGiveExpressionOnFeed(GlobalData.EXPRESSION_INSPIRING, 2);
            }
        });

        ivComment.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(contex, CommentsActivity.class);
                intent.putExtra(GlobalData.HOME_FEED_ID, homeFeedId);
                intent.putExtra(GlobalData.INITIAL_COUNT, commentCount);
                contex.startActivityForResult(intent, GlobalData.COMMENT_SUPP_REQ);
            }
        });

        tvCommentCount.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                myReciclerClickListener.onCommentClick(view, position);
                Intent intent = new Intent(contex, CommentsActivity.class);
                intent.putExtra(GlobalData.HOME_FEED_ID, homeFeedId);
                contex.startActivity(intent);
            }
        });


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == GlobalData.COMMENT_SUPP_REQ && resultCode == RESULT_OK && data != null) {
            data.getIntExtra(GlobalData.LATEST_COUNT, 0);
            LogM.LogE("Updated count" + data.getIntExtra(GlobalData.LATEST_COUNT, 0));
            if (Integer.parseInt(tvCommentCount.getText().toString().trim()) < data.getIntExtra(GlobalData.LATEST_COUNT, 0))
                tvCommentCount.setText("" + data.getIntExtra(GlobalData.LATEST_COUNT, 0));
        }
    }

    private void setLikeButton(int goal, int adming, int inspiring) {

        if (goal == 1) {
            ivLike.setImageResource(R.drawable.goal_green);
            isAlreadyLiked = true;
        } else if (adming == 1) {
            ivLike.setImageResource(R.drawable.admiring_green);
            isAlreadyLiked = true;
        } else if (inspiring == 1) {
            ivLike.setImageResource(R.drawable.inspiration_green);
            isAlreadyLiked = true;
        } else {
            ivLike.setImageResource(R.drawable.like);
        }

    }

    private void setData() {
        if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.SUPP_LIST)) {
            tvSupplimentName.setText(supplimentSearchDataBean.getSuppName());
            tvSupplimentName.setSelected(true);
            tvSupplimentDes.setText(supplimentSearchDataBean.getSuppDetails());
            ivSupplimentPhoto.setImageURI(supplimentSearchDataBean.getSuppPhoto());
        } else if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.PROFILE_ACTIVITY)) {
            tvSupplimentName.setText(profileSupplement.getSuppName());
            tvSupplimentName.setSelected(true);
            tvSupplimentDes.setText(profileSupplement.getSuppDetails());
            ivSupplimentPhoto.setImageURI(profileSupplement.getSuppPhoto());
        } else if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.HOME_FEED)) {
            tvSupplimentName.setText(homeSupplement.getSuppName());
            tvSupplimentName.setSelected(true);
            tvSupplimentDes.setText(homeSupplement.getSuppDetails());
            ivSupplimentPhoto.setImageURI(homeSupplement.getSuppPhoto());
        } else if (getIntent().getStringExtra(GlobalData.FROM).equalsIgnoreCase(GlobalData.SUPPLEMENT)) {
            tvSupplimentName.setText(homeSupplement.getSuppName());
            tvSupplimentName.setSelected(true);
            tvSupplimentDes.setText(homeSupplement.getSuppDetails());
            ivSupplimentPhoto.setImageURI(homeSupplement.getSuppPhoto());
        }
    }

    private void setHeaderBar() {
        headerBar.ibtnLeftOne.setVisibility(View.VISIBLE);
        headerBar.ibtnLeftOne.setImageResource(R.drawable.back);
        headerBar.ibtnRightTwo.setVisibility(View.GONE);
        headerBar.ibtnRightTwo.setImageResource(R.drawable.delete);
        headerBar.tvTitle.setVisibility(View.VISIBLE);
        headerBar.tvTitle.setText(R.string.mi_suppliment_title);
    }

    private void setListener() {
        headerBar.ibtnLeftOne.setOnClickListener(this);
        headerBar.ibtnRightOne.setOnClickListener(this);
        headerBar.ibtnRightTwo.setOnClickListener(this);
        ivLike.setOnClickListener(this);
        ivComment.setOnClickListener(this);
        tvLikeCount.setOnClickListener(this);
    }

    private void bindViews() {
        headerBar = binding.headerBar;
        tvSupplimentName = binding.tvSupplimentName;
        tvSupplimentDes = binding.tvSupplimentDes;
        ivSupplimentPhoto = binding.ivSupplimentPhoto;

        tvLikeCount = binding.tvLikeCount;
        tvCommentCount = binding.tvCommentCount;
        ivGoal = binding.ivGoal;
        ivAdmiring = binding.ivAdmiring;
        ivInspiring = binding.ivInspiring;
        rowCom = binding.rowCom;
        ivComment = binding.ivComment;
        ivLike = binding.ivLike;

    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.ibtnLeftOne:
                setResult(RESULT_CANCELED);
                finish();
                break;

            case R.id.ibtnRightTwo:
                showConfirmationDialog();

                break;

            case R.id.ivLike:
                if (!isAlreadyLiked) {
                    if (isExpressVisible) {
                        rowCom.setVisibility(View.GONE);
                        isExpressVisible = false;
                    } else {
                        rowCom.setVisibility(View.VISIBLE);
                        isExpressVisible = true;
                    }
                } else {
                    if (goal > 0) {
                        callGiveExpressionOnFeed(GlobalData.EXPRESSION_GOAL, 1);
                    }
                    if (inspiring > 0) {
                        callGiveExpressionOnFeed(GlobalData.EXPRESSION_INSPIRING, 2);
                    }
                    if (admiring > 0) {
                        callGiveExpressionOnFeed(GlobalData.EXPRESSION_ADMIRING, 3);
                    }
                }

                break;

            case R.id.tvLikeCount:
                try {
                    if (Integer.parseInt(tvLikeCount.getText().toString().trim()) > 0) {
//                        intent.putExtra("position", pos);
                        Intent pIntent = new Intent(contex, PostExpressionActivity.class);
                        pIntent.putExtra(GlobalData.HOME_FEED_ID, homeFeedId);
                        if (goal == 1) {
                            pIntent.putExtra(GlobalData.EXPRESSION, GlobalData.EXPRESSION_GOAL);
                        } else if (inspiring == 1) {
                            pIntent.putExtra(GlobalData.EXPRESSION, GlobalData.EXPRESSION_INSPIRING);
                        } else if (admiring == 1) {
                            pIntent.putExtra(GlobalData.EXPRESSION, GlobalData.EXPRESSION_ADMIRING);
                        }
                        startActivityForResult(pIntent, 132);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;

            default:
                rowCom.setVisibility(View.GONE);
                isExpressVisible = false;
        }
    }


    private void callGiveExpressionOnFeed(int expression, int FeedPosition) {
        try {
            JSONObject jsonRequest = new JSONObject();
            jsonRequest.put(WebField.PARAM_USER_ID, SessionManager.getUserId(contex));
            jsonRequest.put(WebField.PARAM_ACCESSTOKEN, SessionManager.getAccessToken(contex));
            jsonRequest.put(WebField.PARAM_HOMEFEEDID, homeFeedId);
            jsonRequest.put(WebField.GIVE_EXPRESSION_ON_FEED.PARAM_EXPRESSION, expression);

            Log.e("Details", "Req--" + jsonRequest);

            new GetJsonWithAndroidNetworkingLib(contex, jsonRequest, WebField.BASE_URL + WebField.GIVE_EXPRESSION_ON_FEED.MODE, 1, new OnUpdateListener() {
                @Override
                public void onUpdateComplete(JSONObject jsonResponse, boolean isSuccess) {
                    if (isSuccess) {
                        Log.e("Details", "Response" + jsonResponse);
                        ExpressionOnFeed expression = new Gson().fromJson(String.valueOf(jsonResponse), ExpressionOnFeed.class);
                        rowCom.setVisibility(View.GONE);

//                        if (expressionOnFeed.getStatus() == 2) {
//                            if (expressionOnFeed.getIs_goals() == GlobalData.EXPRESSION_GOAL) {
//                                alHomeFeed.get(FeedPosition).setIs_goals(0);
//                            } else if (expressionOnFeed.getIs_inspiring() == GlobalData.EXPRESSION_INSPIRING) {
//                                alHomeFeed.get(FeedPosition).setIs_inspiring(0);
//                            } else if (expressionOnFeed.getIs_admiring() == GlobalData.EXPRESSION_ADMIRING) {
//                                alHomeFeed.get(FeedPosition).setIs_admiring(0);
//                            }
//                        } else {
//                            if (expressionOnFeed.getIs_goals() == GlobalData.EXPRESSION_GOAL) {
//                                alHomeFeed.get(FeedPosition).setIs_goals(1);
//                            } else if (expressionOnFeed.getIs_inspiring() == GlobalData.EXPRESSION_INSPIRING) {
//                                alHomeFeed.get(FeedPosition).setIs_inspiring(1);
//                            } else if (expressionOnFeed.getIs_admiring() == GlobalData.EXPRESSION_ADMIRING) {
//                                alHomeFeed.get(FeedPosition).setIs_admiring(1);
//                            }
//                        }
//                        alHomeFeed.get(FeedPosition).setExpressionCount(expressionOnFeed.getExpressionCount());
//                        notifyItemChanged(FeedPosition);

                        tvLikeCount.setText("" + expression.getExpressionCount());
                        goal = expression.getIs_goals();
                        inspiring = expression.getIs_inspiring();
                        admiring = expression.getIs_admiring();

                        rowCom.setVisibility(View.GONE);
                        isAlreadyLiked = true;
                        if (expression.getStatus() == 2) {
                            if (expression.getIs_goals() == GlobalData.EXPRESSION_GOAL) {
                                isAlreadyLiked = false;
                                ivLike.setImageResource(R.drawable.like);
                            } else if (expression.getIs_inspiring() == GlobalData.EXPRESSION_INSPIRING) {
                                isAlreadyLiked = false;
                                ivLike.setImageResource(R.drawable.like);
                            } else if (expression.getIs_admiring() == GlobalData.EXPRESSION_ADMIRING) {
                                isAlreadyLiked = false;
                                ivLike.setImageResource(R.drawable.like);
                            }
                        } else {
                            if (goal == 1) {
                                ivLike.setImageResource(R.drawable.goal_green);
                            } else if (inspiring == 2) {
                                ivLike.setImageResource(R.drawable.inspiration_green);
                            } else if (admiring == 3) {
                                ivLike.setImageResource(R.drawable.admiring_green);
                            } else {
                                isAlreadyLiked = false;
                                ivLike.setImageResource(R.drawable.like);
                            }
                        }
                    }
                }
            }).execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showConfirmationDialog() {
        AlertDialogUtility.showConfirmAlert(MiSupplementDetailActivity.this, getResources().getString(R.string.delete_added_suppliment), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                callDeleteSupplimentApi();
            }
        });

    }

    private void callDeleteSupplimentApi() {

        if (ConnectivityDetector.isConnectingToInternet(contex)) {

            try {
                JSONObject jsonObject = new JSONObject();
                jsonObject.put(WebField.PARAM_USER_ID, SessionManager.getUserId(contex));
                jsonObject.put(WebField.PARAM_ACCESSTOKEN, SessionManager.getAccessToken(contex));
                jsonObject.put(WebField.DELETE_SUPPLEMENT.SUPP_ID, supplimentId);
                LogM.LogE("Request : DELETE Suppliment : " + jsonObject.toString());

                new GetJsonWithAndroidNetworkingLib(contex, jsonObject, WebField.BASE_URL + WebField.DELETE_SUPPLEMENT.MODE, 1, new OnUpdateListener() {
                    @Override
                    public void onUpdateComplete(JSONObject jsonObject, boolean isSuccess) {
                        final MiSuppliment miSupplimentList = new Gson().fromJson(String.valueOf(jsonObject), MiSuppliment.class);
                        if (isSuccess) {
                            LogM.LogE("Response : DELETE Suppliment : " + jsonObject.toString());
                            setResult(RESULT_OK);
                            finish();

//                            new Handler().postDelayed(new Runnable() {
//                                @Override
//                                public void run() {
//                                    finish();
//                                }
//                            }, GlobalData.DELAY_TIME);


                        } else {
                            AlertDialogUtility.showSnakeBar(miSupplimentList.getMessage(), tvSupplimentDes, contex);
                        }

                    }
                }).execute();
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            AlertDialogUtility.showAlert(contex, GlobalData.STR_INETRNET_ALERT_MESSAGE);
        }
    }
}
