package com.patchpets.Activitys;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.DisplayMetrics;
import android.view.View;
import android.widget.ImageButton;

import com.patchpets.Adapters.DogsGridAdapter;
import com.patchpets.Adapters.DrawerLayoutAdapter;
import com.patchpets.R;
import com.patchpets.interfaces.OnHomeMenuClick;
import com.patchpets.interfaces.OnItemClickListener;
import com.patchpets.model.User;
import com.patchpets.sharedPreferences.SessionManager;
import com.patchpets.utils.Constants;
import com.patchpets.utils.HeaderBar;

import java.util.ArrayList;

public class HomeActivity extends AppCompatActivity implements View.OnClickListener, OnHomeMenuClick, OnItemClickListener {

    ArrayList<String> breedList, ageList, genderList, statusList, distanceList, sizeList;
    private HeaderBar headerBar;
    private ImageButton ibExplore;
    private RecyclerView rvSlider, rvData;
    private DrawerLayout drawerLayout;
    private DrawerLayoutAdapter drawerLayoutAdapter;
    private DogsGridAdapter adapter;
    private String[] drawerTitle = {"",
            Constants.HOME,
            Constants.FIND_A_PARK,
            Constants.MESSAGES,
            Constants.DIRECTORY,
            Constants.FAVOURITES,
            Constants.SUBMIT_A_PARK,
            Constants.ADS,
            Constants.SETTINGS
    };

    private User user;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        user = SessionManager.getInstance().getUser(HomeActivity.this);
//        drawerLayoutAdapter = new DrawerLayoutAdapter(HomeActivity.this, user, drawerTitle, this);
        setContentView(R.layout.activity_home);
        bindViews();
        setListener();
        setData();

        adapter = new DogsGridAdapter(HomeActivity.this, this);
        rvData.setLayoutManager(new GridLayoutManager(this, 3));
        rvData.setAdapter(adapter);
    }

    private void bindViews() {
        drawerLayout = findViewById(R.id.drawerLayout);
        headerBar = findViewById(R.id.headerBar);
        ibExplore = findViewById(R.id.ibExplore);
        rvSlider = findViewById(R.id.rvSlider);
        rvData = findViewById(R.id.rvData);

        headerBar.tvTitle.setText(getResources().getString(R.string.home));
        headerBar.ibSwitchBtn.setVisibility(View.VISIBLE);
        headerBar.ibFilter.setVisibility(View.VISIBLE);
        headerBar.ibLeft.setImageDrawable(getResources().getDrawable(R.drawable.menu));
        headerBar.ibRight.setImageDrawable(getResources().getDrawable(R.drawable.message));
    }

    private void setListener() {
        headerBar.ibLeft.setOnClickListener(this);
        headerBar.ibRight.setOnClickListener(this);
        headerBar.ibSwitchBtn.setOnClickListener(this);
        headerBar.ibFilter.setOnClickListener(this);
        ibExplore.setOnClickListener(this);
    }

    private void setData() {
        breedList = new ArrayList<>();
        ageList = new ArrayList<>();
        genderList = new ArrayList<>();
        statusList = new ArrayList<>();
        distanceList = new ArrayList<>();
        sizeList = new ArrayList<>();
    }

    private void setDrawer() {
        try {
            DisplayMetrics metrics = getResources().getDisplayMetrics();
            int width = metrics.widthPixels;

            DrawerLayout.LayoutParams layoutParams = (DrawerLayout.LayoutParams) rvSlider.getLayoutParams();
            layoutParams.width = (int) (width * 0.70);
            rvSlider.setLayoutParams(layoutParams);
            rvSlider.setAdapter(drawerLayoutAdapter);
            rvSlider.setLayoutManager(new LinearLayoutManager(HomeActivity.this));

            if (drawerLayout.isDrawerOpen(rvSlider)) {
                drawerLayout.closeDrawer(rvSlider);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void openDrawer() {
        try {
            rvSlider.invalidate();
            drawerLayout.openDrawer(rvSlider);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void closeDrawer() {
        try {
            if (drawerLayout.isDrawerOpen(rvSlider)) {
                drawerLayout.closeDrawer(rvSlider);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        user = SessionManager.getInstance().getUser(HomeActivity.this);
        drawerLayoutAdapter = new DrawerLayoutAdapter(HomeActivity.this, user, drawerTitle, this);
        setDrawer();
    }

    @Override
    public void onBackPressed() {
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            drawerLayout.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void onClick(View v) {
        try {
            switch (v.getId()) {
                case R.id.ibLeft:
                    openDrawer();
                    break;

                case R.id.ibRight:
                    startActivitys(MessagesActivity.class);
                    break;

                case R.id.ibSwitchBtn:
                    headerBar.ibFilter.performClick();
                    break;

                case R.id.ibFilter:
                    Intent i = new Intent(getApplicationContext(), FilterActivity.class);
                    i.putStringArrayListExtra(Constants.BREED_LIST, breedList);
                    i.putStringArrayListExtra(Constants.AGE_LIST, ageList);
                    i.putStringArrayListExtra(Constants.GENDER_LIST, genderList);
                    i.putStringArrayListExtra(Constants.STATUS_LIST, statusList);
                    i.putStringArrayListExtra(Constants.DISTANCE_LIST, distanceList);
                    i.putStringArrayListExtra(Constants.SIZE_LIST, sizeList);

                    startActivityForResult(i, 101);
                    break;

                case R.id.ibExplore:
                    startActivitys(ExploreActivity.class);
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void homeMenuClick(int position, View view) {
        closeDrawer();
        switch (position) {
            case Constants.POSITION_PROFILE:
                switch (view.getId()) {
                    case R.id.ibEdit:
                        if (user.getUserType() == Constants.BUSINESS_USER) {
                            startActivitys(SetupBusinessProfileActivity.class);
                        } else if (user.getUserType() == Constants.DOG_OWNER) {
                            startActivitys(SetupProfileActivity.class);
                        }
                        break;

                    default:
                        startActivitys(ProfileActivity.class);
                        break;
                }
                break;

            case Constants.POSITION_FIND_A_PARK:
                startActivitys(ExploreActivity.class);
                break;

            case Constants.POSITION_MESSAGES:
                startActivitys(MessagesActivity.class);
                break;

            case Constants.POSITION_DIRECTORY:
                Intent iExplore = new Intent(this, ExploreActivity.class);
                iExplore.putExtra(Constants.EXPLORE_DIRECTORY_TAB_NUMBER, Constants.EXPLORE_DIRECTORY);
                startActivity(iExplore);
                break;

            case Constants.POSITION_FAVOURITES:
                startActivitys(FavouritesDogActivity.class);
                break;

            case Constants.POSITION_SUBMIT_A_PARK:
                startActivitys(SubmitParkActivity.class);
                break;

            case Constants.POSITION_ADS:
                startActivitys(AdsActivity.class);
                break;

            case Constants.POSITION_SETTINGS:
                startActivitys(SettingsActivity.class);
                break;
        }
    }

    @Override
    public void onItemClicked(int position) {
        Intent iDogDetails = new Intent(this, DogDetailsActivity.class);
        startActivity(iDogDetails);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 101) {
            breedList = data.getStringArrayListExtra(Constants.BREED_LIST);
            ageList = data.getStringArrayListExtra(Constants.AGE_LIST);
            genderList = data.getStringArrayListExtra(Constants.GENDER_LIST);
            statusList = data.getStringArrayListExtra(Constants.STATUS_LIST);
            distanceList = data.getStringArrayListExtra(Constants.DISTANCE_LIST);
            sizeList = data.getStringArrayListExtra(Constants.SIZE_LIST);
            boolean sizeCheck;
            if (breedList.size() > 0 || ageList.size() > 0 || genderList.size() > 0 || statusList.size() > 0 || distanceList.size() > 0 || sizeList.size() > 0) {
                sizeCheck = true;
            } else {
                sizeCheck = false;
            }
            setBtnStatus(sizeCheck);
        }
    }

    public void setBtnStatus(boolean size) {
        if (size) {
            headerBar.ibSwitchBtn.setImageResource(R.drawable.on_btn);
            headerBar.ibFilter.setImageResource(R.drawable.funnel_green);
        } else {
            headerBar.ibSwitchBtn.setImageResource(R.drawable.off_btn);
            headerBar.ibFilter.setImageResource(R.drawable.funnel_grey);
        }
    }

    public void startActivitys(Class activityClass) {
        Intent intent = new Intent(this, activityClass);
        startActivity(intent);
    }
}
