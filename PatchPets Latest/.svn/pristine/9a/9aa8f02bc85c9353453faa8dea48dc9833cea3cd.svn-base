package com.patchpets.Activitys;

import android.app.ProgressDialog;
import android.content.Intent;
import android.databinding.DataBindingUtil;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import com.patchpets.Adapters.DogsGridImageAdapter;
import com.patchpets.R;
import com.patchpets.databinding.ActivityProfileBinding;
import com.patchpets.interfaces.OnItemClickListener;
import com.patchpets.model.User;
import com.patchpets.model.requestModel.HideShowProfileRequest;
import com.patchpets.model.requestModel.ProfileRequest;
import com.patchpets.model.responseModel.ApiResponse;
import com.patchpets.model.responseModel.ProfileResponse;
import com.patchpets.sharedPreferences.SessionManager;
import com.patchpets.utils.AlertDialogUtility;
import com.patchpets.utils.CircleTransform;
import com.patchpets.utils.Constants;
import com.patchpets.utils.HeaderBar;
import com.patchpets.utils.Helper;
import com.patchpets.webservices.APIRequest;
import com.patchpets.webservices.ResponseCallback;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;

public class ProfileActivity extends AppCompatActivity implements View.OnClickListener, OnItemClickListener {

    private ActivityProfileBinding binding;
    private HeaderBar headerBar;
    private ImageButton ibHide;
    private ImageView ivProfile;
    private TextView tvUserName, tvEmpty;
    private RecyclerView rvData;
    private DogsGridImageAdapter adapter;
    private User user;
    private ArrayList<ProfileResponse.UserDataBean.DogListBean> alDogs = new ArrayList<>();
    private ProgressDialog pDialog;
    private APIRequest apiRequest;
    private View snackBar;
    private int hideShow = 0; //1=Hide, 0=Visible
    private int oppUserId = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_profile);
        user = SessionManager.getInstance().getUser(ProfileActivity.this);
        snackBar = findViewById(android.R.id.content);
        oppUserId = getIntent().getIntExtra(Constants.OPP_USER_ID, 0);

        bindViews();
        setListener();
//        setData();

        adapter = new DogsGridImageAdapter(ProfileActivity.this, this, alDogs);
        rvData.setLayoutManager(new GridLayoutManager(this, 3));
        rvData.setAdapter(adapter);

        callGetUserProfileAPI();
    }

    private void bindViews() {
        headerBar = binding.headerBar;
        ibHide = binding.ibHide;
        ivProfile = binding.ivProfile;
        tvUserName = binding.tvUserName;
        tvEmpty = binding.tvEmpty;
        rvData = binding.rvData;
    }

    private void setListener() {
        headerBar.ibLeft.setOnClickListener(this);
        headerBar.ibRight.setOnClickListener(this);
        ibHide.setOnClickListener(this);
    }

    private void setData() {
        headerBar.tvTitle.setText(getResources().getString(R.string.owner_profile));
        headerBar.ibLeft.setImageDrawable(getResources().getDrawable(R.drawable.back));
        headerBar.ibRight.setImageDrawable(getResources().getDrawable(R.drawable.edit));

        if (user.getUserType() == Constants.BUSINESS_USER) {
            tvUserName.setText(user.getBusinessName());
        } else if (user.getUserType() == Constants.DOG_OWNER) {
            tvUserName.setText(user.getFirstName() + " " + user.getLastName());
        }
        if (user.getProfilePic() != null && user.getProfilePic().length() > 0) {
            Picasso.get()
                    .load(user.getProfilePic())
                    .placeholder(R.drawable.profile)
                    .error(R.drawable.profile)
                    .fit().centerCrop()
                    .rotate(90)
                    .transform(new CircleTransform())
                    .into(ivProfile);
        }
    }

    @Override
    public void onClick(View v) {
        try {
            switch (v.getId()) {
                case R.id.ibLeft:
                    onBackPressed();
                    break;

                case R.id.ibRight:
                    if (user.getUserType() == Constants.BUSINESS_USER) {
                        Intent iSetUpBusinessProfile = new Intent(ProfileActivity.this, SetupBusinessProfileActivity.class);
                        startActivity(iSetUpBusinessProfile);
                    } else if (user.getUserType() == Constants.DOG_OWNER) {
                        Intent iSetUpProfile = new Intent(ProfileActivity.this, SetupProfileActivity.class);
                        startActivity(iSetUpProfile);
                    }
                    break;

                case R.id.ibHide:
                    callHideShowProfileAPI();
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void callGetUserProfileAPI() {
        if (Helper.isCheckInternet(ProfileActivity.this)) {
            pDialog = new ProgressDialog(ProfileActivity.this);
            pDialog.setCancelable(false);
            pDialog.setMessage(getResources().getString(R.string.please_wait));
            pDialog.show();
            apiRequest = new APIRequest();
            apiRequest.getUserProfileAPI(profileRequest(), responseCallbackProfile);
        }
    }

    private ProfileRequest profileRequest() {
        ProfileRequest profileRequest = new ProfileRequest();
        profileRequest.setUserId(user.getUserId());
        profileRequest.setAccessToken(user.getAccessToken());
        profileRequest.setOppUserId(oppUserId != 0 ? oppUserId : user.getUserId());
        return profileRequest;
    }

    ResponseCallback responseCallbackProfile = new ResponseCallback() {
        @Override
        public void ResponseSuccessCallBack(Object object) {
            if (pDialog != null && pDialog.isShowing()) {
                pDialog.dismiss();
            }
            if (object != null) {
                ProfileResponse response = (ProfileResponse) object;
                if (response.getStatus() == 1) {
                    setUserData(response.getUserData());
                } else {
                    AlertDialogUtility.showSnakeBar(response.getMessage(), snackBar, ProfileActivity.this);
                }
            }
        }

        @Override
        public void ResponseFailCallBack(Object object) {
            if (pDialog != null && pDialog.isShowing()) {
                pDialog.dismiss();
            }
        }
    };

    private void setUserData(ProfileResponse.UserDataBean userDetails) {
        try {
            if (userDetails.getUserId() != user.getUserId()) {
                headerBar.tvTitle.setText(getResources().getString(R.string.profile));
                headerBar.ibLeft.setImageDrawable(getResources().getDrawable(R.drawable.back));
                headerBar.ibRight.setVisibility(View.GONE);
                ibHide.setVisibility(View.INVISIBLE);

                if (userDetails.getUserType() == Constants.BUSINESS_USER) {
                    tvUserName.setText(userDetails.getBusinessName());
                } else if (userDetails.getUserType() == Constants.DOG_OWNER) {
                    tvUserName.setText(userDetails.getFirstName() + " " + userDetails.getLastName());
                }
                setProfileUI(userDetails.getIsProfileHide());
                if (userDetails.getIsProfileHide() == Constants.PROFILE_SHOW) {
                    if (userDetails.getProfilePic() != null && userDetails.getProfilePic().length() > 0) {
                        Picasso.get()
                                .load(userDetails.getProfilePic())
                                .placeholder(R.drawable.profile)
                                .error(R.drawable.profile)
                                .fit().centerCrop()
                                .rotate(90)
                                .transform(new CircleTransform())
                                .into(ivProfile);
                    }
                }
            } else {
                headerBar.tvTitle.setText(getResources().getString(R.string.owner_profile));
                headerBar.ibLeft.setImageDrawable(getResources().getDrawable(R.drawable.back));
                headerBar.ibRight.setImageDrawable(getResources().getDrawable(R.drawable.edit));

                if (userDetails.getUserType() == Constants.BUSINESS_USER) {
                    tvUserName.setText(userDetails.getBusinessName());
                } else if (userDetails.getUserType() == Constants.DOG_OWNER) {
                    tvUserName.setText(userDetails.getFirstName() + " " + userDetails.getLastName());
                }

                hideShow = userDetails.getIsProfileHide();
                setProfileUI(hideShow);
                if (hideShow == Constants.PROFILE_SHOW) {
                    if (userDetails.getProfilePic() != null && userDetails.getProfilePic().length() > 0) {
                        Picasso.get()
                                .load(userDetails.getProfilePic())
                                .placeholder(R.drawable.profile)
                                .error(R.drawable.profile)
                                .fit().centerCrop()
                                .rotate(90)
                                .transform(new CircleTransform())
                                .into(ivProfile);
                    }
                }
            }

            alDogs.clear();
            alDogs.addAll(userDetails.getDogList());
            adapter.notifyDataSetChanged();
            if (alDogs.size() > 0) {
                rvData.setVisibility(View.VISIBLE);
                tvEmpty.setVisibility(View.GONE);
            } else {
                tvEmpty.setVisibility(View.VISIBLE);
                rvData.setVisibility(View.GONE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void callHideShowProfileAPI() {
        if (Helper.isCheckInternet(ProfileActivity.this)) {
            pDialog = new ProgressDialog(ProfileActivity.this);
            pDialog.setCancelable(false);
            pDialog.setMessage(getResources().getString(R.string.please_wait));
            pDialog.show();
            apiRequest = new APIRequest();
            apiRequest.hideShowProfileAPI(hideShowProfileRequest(), responseCallbackHideShowProfile);
        }
    }

    private HideShowProfileRequest hideShowProfileRequest() {
        HideShowProfileRequest hideShowProfileRequest = new HideShowProfileRequest();
        hideShowProfileRequest.setUserId(user.getUserId());
        hideShowProfileRequest.setAccessToken(user.getAccessToken());
        hideShowProfileRequest.setSetHideStatus(hideShow == Constants.PROFILE_SHOW ? Constants.PROFILE_HIDE : Constants.PROFILE_SHOW);
        return hideShowProfileRequest;
    }

    ResponseCallback responseCallbackHideShowProfile = new ResponseCallback() {
        @Override
        public void ResponseSuccessCallBack(Object object) {
            if (pDialog != null && pDialog.isShowing()) {
                pDialog.dismiss();
            }
            if (object != null) {
                ApiResponse response = (ApiResponse) object;
                if (response.getStatus() == 1) {
                    hideShow = hideShow == Constants.PROFILE_SHOW ? Constants.PROFILE_HIDE : Constants.PROFILE_SHOW;
                    setProfileUI(hideShow);
                } else {
                    AlertDialogUtility.showSnakeBar(response.getMessage(), snackBar, ProfileActivity.this);
                }
            }
        }

        @Override
        public void ResponseFailCallBack(Object object) {
            if (pDialog != null && pDialog.isShowing()) {
                pDialog.dismiss();
            }
        }
    };

    @Override
    public void onItemClicked(int position) {
        Intent iDogDetails = new Intent(this, DogDetailsActivity.class);
        startActivity(iDogDetails);
    }

    private void setProfileUI(int hideShow) {
        try {
            if (hideShow == Constants.PROFILE_HIDE) {
                ivProfile.setVisibility(View.GONE);
                tvUserName.setVisibility(View.INVISIBLE);
                ibHide.setBackground(getResources().getDrawable(R.drawable.visible));
            } else {
                ivProfile.setVisibility(View.VISIBLE);
                tvUserName.setVisibility(View.VISIBLE);
                ibHide.setBackground(getResources().getDrawable(R.drawable.hide));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
